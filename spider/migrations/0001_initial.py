# Generated by Django 2.1.7 on 2020-11-05 06:12

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '账户管理',
                'verbose_name_plural': '账户管理',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Proxy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.IntegerField(choices=[(0, '搜索代理'), (1, '下载代理')], default=1, verbose_name='类型')),
                ('user', models.CharField(blank=True, default='', max_length=100)),
                ('password', models.CharField(blank=True, default='', max_length=100)),
                ('host', models.CharField(max_length=100)),
                ('port', models.IntegerField(default=80)),
                ('speed', models.IntegerField(default=0, verbose_name='连接速度(ms)')),
                ('status', models.IntegerField(choices=[(0, '未检测'), (1, '检测成功'), (2, '检测失败')], default=0, verbose_name='状态')),
                ('retry', models.IntegerField(default=0, verbose_name='尝试次数')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '访问代理',
                'verbose_name_plural': '访问代理',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uniqueid', models.CharField(max_length=100, unique=True, verbose_name='url的md5值')),
                ('words', models.IntegerField(default=0, verbose_name='字数')),
                ('url', models.CharField(default='', max_length=500, verbose_name='文章的url')),
                ('avatar', models.CharField(default='', max_length=500, verbose_name='缩略图地址')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('origin_title', models.CharField(default='', max_length=200, verbose_name='原文标题')),
                ('abstract', models.TextField(default='', verbose_name='内容简介')),
                ('content', models.TextField(default='', verbose_name='文章内容')),
                ('source', models.TextField(default='', verbose_name='文章原内容')),
                ('read_num', models.IntegerField(default=0, verbose_name='阅读数')),
                ('like_num', models.IntegerField(default=0, verbose_name='点赞数')),
                ('publish_time', models.DateTimeField(db_index=True, verbose_name='发布时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('available', models.CharField(db_index=True, default='', max_length=100, verbose_name='是否可用')),
            ],
            options={
                'verbose_name': '文章',
                'verbose_name_plural': '文章',
            },
        ),
        migrations.CreateModel(
            name='Wechat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.CharField(blank=True, default='', max_length=500, verbose_name='公众号头像')),
                ('qrcode', models.CharField(blank=True, default='', max_length=500, verbose_name='二维码')),
                ('name', models.CharField(max_length=100, verbose_name='公众号')),
                ('wechatid', models.CharField(max_length=100, unique=True, verbose_name='公众号id')),
                ('intro', models.TextField(blank=True, default='', verbose_name='简介')),
                ('frequency', models.IntegerField(default=0, verbose_name='爬取频率, 单位:分钟')),
                ('next_crawl_time', models.DateTimeField(auto_now_add=True, verbose_name='下次爬取时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('status', models.IntegerField(choices=[(0, '默认'), (1, '禁用'), (2, '删除')], default=0, verbose_name='状态')),
            ],
            options={
                'verbose_name': '公众号',
                'verbose_name_plural': '公众号',
            },
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.IntegerField(choices=[(0, '关键词')], default=0, verbose_name='类型')),
                ('text', models.CharField(max_length=100, verbose_name='词')),
                ('intro', models.TextField(blank=True, default='', verbose_name='简介')),
                ('frequency', models.IntegerField(default=100, verbose_name='爬取频率, 单位:分钟')),
                ('next_crawl_time', models.DateTimeField(auto_now_add=True, verbose_name='下次爬取时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '关键词',
                'verbose_name_plural': '关键词',
            },
        ),
        migrations.AddField(
            model_name='topic',
            name='wechat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spider.Wechat', verbose_name='公众号'),
        ),
    ]
